using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Reflection;
using System.Reflection.Emit;

namespace DynamicClassGeneration
{
    public class ClassCreator
    {
        AssemblyName assemblyname;

        public ClassCreator(string pClassName)
        {
            this.assemblyname = new AssemblyName(pClassName);
        }

        // Functions to generate a class and its members at runtime
        private TypeBuilder CreateClass()
        {
            AssemblyBuilder assemblybuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(assemblyname, AssemblyBuilderAccess.Run);
            ModuleBuilder modulebuilder = assemblybuilder.DefineDynamicModule("NewModule");
            TypeBuilder typebuilder = modulebuilder.DefineType(this.assemblyname.FullName
                , TypeAttributes.Public | TypeAttributes.Class | TypeAttributes.AutoClass
                | TypeAttributes.AnsiClass | TypeAttributes.BeforeFieldInit | TypeAttributes.AutoLayout, null);

            return typebuilder;
        }

        private void CreateConstructor(TypeBuilder typebuilder)
        {
            typebuilder.DefineDefaultConstructor(MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName);
        }

        private void CreateProperty(TypeBuilder typebuilder, string propertyname, Type propertytype)
        {
            // Creating a field and its associated property
            FieldBuilder fieldbuilder = typebuilder.DefineField("_" + propertyname, propertytype, FieldAttributes.Private);
            PropertyBuilder propertybuilder = typebuilder.DefineProperty(propertyname, PropertyAttributes.HasDefault, propertytype, null);
            
            // Defining Get method of our property
            MethodBuilder getmethodbuilder = typebuilder.DefineMethod("get_" + propertyname,
                MethodAttributes.Public | MethodAttributes.SpecialName
                | MethodAttributes.HideBySig, propertytype, Type.EmptyTypes);

            ILGenerator getIL = getmethodbuilder.GetILGenerator();

            getIL.Emit(OpCodes.Ldarg_0);
            getIL.Emit(OpCodes.Ldfld, fieldbuilder);
            getIL.Emit(OpCodes.Ret);

            // Defining Set method of our property
            MethodBuilder setmethodbuilder = typebuilder.DefineMethod("set_" + propertyname,
                MethodAttributes.Public | MethodAttributes.SpecialName
                | MethodAttributes.HideBySig, null, new[] { propertytype });

            ILGenerator setIL = setmethodbuilder.GetILGenerator();
            Label modifyProperty = setIL.DefineLabel();
            Label exitSet = setIL.DefineLabel();

            setIL.MarkLabel(modifyProperty);
            setIL.Emit(OpCodes.Ldarg_0);
            setIL.Emit(OpCodes.Ldarg_1);
            setIL.Emit(OpCodes.Stfld, fieldbuilder);

            setIL.Emit(OpCodes.Nop);
            setIL.MarkLabel(exitSet);
            setIL.Emit(OpCodes.Ret);

            propertybuilder.SetGetMethod(getmethodbuilder);
            propertybuilder.SetSetMethod(setmethodbuilder);
        }

        public object CreateObject(string[] PropertyNames, Type[] Types)
        {
            if (PropertyNames.Length != Types.Length)
                Console.WriteLine("The no. of property names don't match the no. of types");

            TypeBuilder dynamicclass = this.CreateClass();
            this.CreateConstructor(dynamicclass);

            for (int i = 0; i < PropertyNames.Count(); i++)
                CreateProperty(dynamicclass, PropertyNames[i], Types[i]);

            Type type = dynamicclass.CreateType();

            return Activator.CreateInstance(type);
        }
    }


    class Program
    {
        static void Main(string[] args)
        {
            ClassCreator cc = new ClassCreator("MyClass");
            var myclass = cc.CreateObject(new string[3] { "ID", "Name", "Address" },
                new Type[3] { typeof(int), typeof(string), typeof(string) });
            Type tp = myclass.GetType();

            PropertyInfo[] props = myclass.GetType().GetProperties();
            myclass.GetType().GetProperty("ID").SetValue(myclass, 123);
            myclass.GetType().GetProperty("Name").SetValue(myclass, "Ali");
            myclass.GetType().GetProperty("Address").SetValue(myclass, "Karachi");

            foreach (PropertyInfo p in props)
            {
                Console.WriteLine(p.Name);
                Console.WriteLine(p.PropertyType);
                Console.WriteLine(p.GetValue(myclass));
            }
        }
    }
}
